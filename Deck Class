import java.util.ArrayList;
import java.util.Collections;
public class Deck 
{
	private ArrayList<Cards> discard;
	private ArrayList<Cards> deck;
	private ArrayList<Cards> age1;
	private ArrayList<Cards> age2; 
	private ArrayList<Cards> age3;
	
	public Deck() 
	{
		discard = new ArrayList<Cards>();
		deck = new ArrayList<Cards>();
		age1 = new ArrayList<Cards>();
		age2 = new ArrayList<Cards>();
		age3 = new ArrayList<Cards>();
	}
	
	public void ageCreator()
	{
		for(int counter = 0; counter < deck.size(); counter++)
		{
			if(Integer.parseInt(deck.get(counter).getAge()) == 1)
				age1.add(deck.get(counter));
			
			else if (Integer.parseInt(deck.get(counter).getAge()) == 2)
				age2.add(deck.get(counter));
			
			else if(Integer.parseInt(deck.get(counter).getAge()) == 3)
				age3.add(deck.get(counter));
		}
	}
	
	public ArrayList<Cards> getAge(int age)
	{
		return discard;
	}
	
	public Cards draw(int x)
	{
		discard.add(deck.get(x));
		return deck.remove(x);
	}
	
	public Cards drawFromAge(int age, int x)
	{
		discard.add(deck.get(x));
		switch(age)
		{
		case 1:
			return age1.remove(x);
		case 2:
			return age2.remove(x);
		case 3:
			return age3.remove(x);
		}
		return null;
	}
	
	public Deck getAgeDeck(int ageNum)
	{
		Deck agex = new Deck();
		agex.deckClear();
		for(int counter = 0; counter < deck.size(); counter++)
		{
			if(Integer.parseInt(deck.get(counter).getAge()) == ageNum)
			{
				agex.addCard(deck.get(counter));
			}
		}
		return agex;
	}
	
	public void deckShuffle()
	{
		Collections.shuffle(deck);
	}
	
	public void addCard(Cards x)
	{
		deck.add(x);
	}
	
	public void setDeck(ArrayList<Cards> x)
	{
		deck = x;
	}
	
	public void deckClear()
	{
		deck = null;
	}
}
