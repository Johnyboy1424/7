import java.util.ArrayList;

public class Player 
{
	//variables
	private ArrayList<Cards> hand;
	private int coins;
	private int score;
	private String wonderName;
	private int activeStages;
	private ArrayList<String> stage;
	private String stageFunction;
	private int warPoints;
	private String name;
	
	//constructor
	Player(String name)
	{
		coins = 0;
		activeStages = 0;
		this.name = name;
		score = 0;
		hand = new ArrayList<Cards>();
		warPoints = 0;
		stage = new ArrayList<String>();
	}
	
	//get and set methods, as well as basic add and calculate score methods
	public int getScore()
	{
		return score;
	}
	
	public void addScore(int x)
	{
		score += x;
	}
	
	public void addCoints(int x)
	{
		coins += x;
	}
	
	public ArrayList<Cards> getHand()
	{
		return hand;
	}
	
	public int getActiveStages()
	{
		return activeStages;
	}
	
	public String getWonderName()
	{
		return wonderName;
	}
	
	public void setStage()
	{
		activeStages += 1;
	}
	
	public ArrayList<String> getStages()
	{
		return stage;
	}
	
	public int calcPoints()
	{
		//creates points and immediately takes the amount of coins and transfers it to points
		int points = coins % 3;
		
		//adds a point for each card the player has
		points += hand.size();
		
		//organizes the hand
		organizeHand();
		
		//gives points based off each specific cards function
		int i = 0;
		while(hand.get(i).getColor().equals("blue") || hand.get(i).getColor().equals("green"))
		{
			if(hand.get(i).getColor().equals("blue"))
			{
				/* creates a variable representing the seventh index in the string for function,
				the string for function being written in the form 'points:x' where 
				x is denoted as the number of points for the specific blue card.
				note that the seventh index is x, and that the 'points:x' form is specific only to blue cards */
				
				String x = hand.get(i).getFunction().charAt(7);
				points += Integer.parseInt(x);
			}
			else if(hand.get(i).getColor().equals("green))
			{
				//requires the rules regarding science cards
			}
			i++;
		}
		return points;
	}
	
	public void addToHand()
	{
		
	}
	
	//organize cards by color via this order: brown, grey, yellow, green, blue, red, purple
	public void organizeHand()
	{
		ArrayList<Cards> tempHand = new ArrayList<Cards>();
		
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("brown"))
				tempHand.add(hand.get(counter));
			
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("grey"))
				tempHand.add(hand.get(counter));
			
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("yellow"))
				tempHand.add(hand.get(counter));
			
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("green"))
				tempHand.add(hand.get(counter));
		
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("blue"))
				tempHand.add(hand.get(counter));
		
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("red"))
				tempHand.add(hand.get(counter));
			
		for(int counter = 0; counter < hand.size(); counter++)
			if(hand.get(counter).getColor().equals("purple"))
				tempHand.add(hand.get(counter));
		
		hand = tempHand;
	}
}
